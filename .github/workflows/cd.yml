name: Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip checks)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/lexchrono

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.set-env.outputs.environment }}
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set deployment environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Check deployment conditions
        id: checks
        run: |
          SHOULD_DEPLOY="true"
          
          # Skip deployment checks if force deploy is enabled
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "🚨 Force deployment enabled - skipping checks"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if CI passed (for automatic deployments)
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Wait for CI to complete
            echo "⏳ Waiting for CI to complete..."
            sleep 60
            
            # Check latest workflow run status
            WORKFLOW_STATUS=$(gh run list --workflow=ci.yml --limit=1 --json status --jq '.[0].status')
            if [[ "$WORKFLOW_STATUS" != "completed" ]]; then
              echo "❌ CI workflow not completed yet"
              SHOULD_DEPLOY="false"
            fi
            
            WORKFLOW_CONCLUSION=$(gh run list --workflow=ci.yml --limit=1 --json conclusion --jq '.[0].conclusion')
            if [[ "$WORKFLOW_CONCLUSION" != "success" ]]; then
              echo "❌ CI workflow failed - blocking deployment"
              SHOULD_DEPLOY="false"
            fi
          fi
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and push Docker image
  build-image:
    name: Build & Push Image
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-,suffix=-${{ needs.pre-deploy.outputs.deploy_env }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            SENTRY_RELEASE=${{ needs.pre-deploy.outputs.version }}

      - name: Set image output
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}" >> $GITHUB_OUTPUT

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-image]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    environment: 
      name: ${{ needs.pre-deploy.outputs.deploy_env }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ needs.pre-deploy.outputs.deploy_env }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ needs.pre-deploy.outputs.deploy_env == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
        env:
          SENTRY_RELEASE: ${{ needs.pre-deploy.outputs.version }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt ${{ needs.pre-deploy.outputs.deploy_env == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to: $DEPLOYMENT_URL"

      - name: Verify deployment
        run: |
          sleep 30
          if curl -f "${{ steps.deploy.outputs.url }}/api/health"; then
            echo "✅ Vercel deployment health check passed"
          else
            echo "❌ Vercel deployment health check failed"
            exit 1
          fi

  # Deploy to Railway
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-image]
    if: needs.pre-deploy.outputs.should_deploy == 'true' && needs.pre-deploy.outputs.deploy_env == 'production'
    environment:
      name: railway-production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway
        id: deploy
        run: |
          railway up --environment=production
          DEPLOYMENT_URL=$(railway status --json | jq -r '.deployments[0].url')
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "🚀 Deployed to Railway: $DEPLOYMENT_URL"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify Railway deployment
        run: |
          sleep 60
          if curl -f "${{ steps.deploy.outputs.url }}/api/health"; then
            echo "✅ Railway deployment health check passed"
          else
            echo "❌ Railway deployment health check failed"
            exit 1
          fi

  # Database migrations
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-vercel]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    environment: ${{ needs.pre-deploy.outputs.deploy_env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: |
          echo "🔄 Running database migrations for ${{ needs.pre-deploy.outputs.deploy_env }}"
          # Add migration commands here when implemented
          # npm run migrate:${{ needs.pre-deploy.outputs.deploy_env }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: ${{ needs.pre-deploy.outputs.deploy_env }}

  # Post-deployment tests
  post-deploy-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-vercel, migrate-database]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests against deployed application"
          # Add smoke tests here
          # npm run test:smoke -- --url=${{ needs.deploy-vercel.outputs.url }}

      - name: Run API tests
        run: |
          echo "🔍 Running API tests"
          # Add API tests here
          # npm run test:api -- --url=${{ needs.deploy-vercel.outputs.url }}

  # Security scan of deployed app
  security-scan:
    name: Security Scan (Deployed)
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-vercel]
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    steps:
      - name: OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: ${{ needs.deploy-vercel.outputs.url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Sentry release
  sentry-release:
    name: Create Sentry Release
    runs-on: ubuntu-latest
    needs: [pre-deploy, post-deploy-tests]
    if: needs.pre-deploy.outputs.should_deploy == 'true' && needs.pre-deploy.outputs.deploy_env == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ needs.pre-deploy.outputs.deploy_env }}
          version: ${{ needs.pre-deploy.outputs.version }}

  # Notification and cleanup
  notify-success:
    name: Deployment Success Notification
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-vercel, post-deploy-tests, sentry-release]
    if: always() && needs.pre-deploy.outputs.should_deploy == 'true' && needs.post-deploy-tests.result == 'success'
    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 Deployment to ${{ needs.pre-deploy.outputs.deploy_env }} completed successfully!"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Environment: ${{ needs.pre-deploy.outputs.deploy_env }}"
          echo "Vercel URL: ${{ needs.deploy-vercel.outputs.url }}"

      - name: Update GitHub deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id,
              state: 'success',
              environment_url: '${{ needs.deploy-vercel.outputs.url }}',
              description: 'Deployment completed successfully'
            });

  # Rollback capability
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && needs.pre-deploy.outputs.should_deploy == 'true'
    needs: [pre-deploy, deploy-vercel, post-deploy-tests]
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment due to failure"
          # Add rollback logic here
          # This could involve:
          # 1. Promoting previous version on Vercel
          # 2. Reverting database migrations
          # 3. Notifying team

      - name: Notify rollback
        run: |
          echo "⚠️ Deployment to ${{ needs.pre-deploy.outputs.deploy_env }} was rolled back"
          echo "Please check the logs and investigate the failure"