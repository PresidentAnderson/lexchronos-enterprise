name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=high --json > npm-audit-results.json
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload vulnerability results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-vulnerabilities
          path: |
            npm-audit-results.json
            snyk-results.json

  # Code quality and SAST scanning
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run ESLint security rules
        run: |
          npm ci
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
        continue-on-error: true

      - name: Run Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nextjs

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: zricethezav/gitleaks-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker image vulnerability scanning
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t lexchrono:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lexchrono:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Bench Security
        run: |
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh -c container_images

      - name: Scan image with Grype
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: "lexchrono:security-scan"
          severity-cutoff: critical
          fail-build: false

      - name: Upload Grype scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

  # Infrastructure as Code security
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Hadolint for Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  # License compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check license compliance
        run: |
          npx license-checker --json --out license-report.json
          npx license-checker --failOn 'GPL;AGPL;LGPL;CPAL;OSL;EPL;MPL' --excludePrivatePackages

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-compliance-report
          path: license-report.json

  # Security policy compliance
  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          echo "üîç Checking for security policy compliance..."
          
          # Check for required security files
          FILES=(
            "SECURITY.md"
            ".github/SECURITY.md"
            "docs/SECURITY.md"
          )
          
          FOUND_SECURITY_MD=false
          for file in "${FILES[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ Found security policy: $file"
              FOUND_SECURITY_MD=true
              break
            fi
          done
          
          if [[ "$FOUND_SECURITY_MD" == false ]]; then
            echo "‚ùå No SECURITY.md file found. Creating one..."
            mkdir -p .github
            cat > .github/SECURITY.md << 'EOF'
          # Security Policy
          
          ## Supported Versions
          
          | Version | Supported          |
          | ------- | ------------------ |
          | 1.0.x   | :white_check_mark: |
          | < 1.0   | :x:                |
          
          ## Reporting a Vulnerability
          
          Please report security vulnerabilities to security@lexchrono.com
          
          We take all security vulnerabilities seriously and will acknowledge receipt
          of your vulnerability report within 48 hours.
          EOF
          fi
          
          # Check for dependency update automation
          if [[ ! -f ".github/dependabot.yml" ]]; then
            echo "‚ùå No dependabot.yml found. Creating one..."
            mkdir -p .github
            cat > .github/dependabot.yml << 'EOF'
          version: 2
          updates:
            - package-ecosystem: "npm"
              directory: "/"
              schedule:
                interval: "weekly"
              open-pull-requests-limit: 5
              reviewers:
                - "security-team"
              labels:
                - "dependencies"
                - "security"
          EOF
          fi

      - name: Commit security files if created
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/SECURITY.md .github/dependabot.yml || true
          git commit -m "Add security policy and dependabot configuration" || true
        continue-on-error: true

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-analysis, secret-scan, docker-security-scan, iac-security, license-compliance, compliance-check]
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '‚úÖ' || '‚ùå' }} | Vulnerability check for npm packages |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis | ${{ needs.code-analysis.result == 'success' && '‚úÖ' || '‚ùå' }} | Static analysis with CodeQL and Semgrep |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '‚úÖ' || '‚ùå' }} | Secret detection in codebase |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security-scan.result == 'success' && '‚úÖ' || '‚ùå' }} | Container image vulnerability scan |" >> $GITHUB_STEP_SUMMARY
          echo "| IaC Security | ${{ needs.iac-security.result == 'success' && '‚úÖ' || '‚ùå' }} | Infrastructure as Code security |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result == 'success' && '‚úÖ' || '‚ùå' }} | License compatibility check |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Check | ${{ needs.compliance-check.result == 'success' && '‚úÖ' || '‚ùå' }} | Security policy compliance |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.code-analysis.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" && 
                "${{ needs.docker-security-scan.result }}" == "success" ]]; then
            echo "### ‚úÖ Overall Security Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All critical security checks have passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Overall Security Status: ATTENTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "Some security checks have failed or require attention. Please review the detailed results." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed security checks" >> $GITHUB_STEP_SUMMARY
          echo "- Address high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all secrets are properly managed" >> $GITHUB_STEP_SUMMARY